From 4afa1ed5b4f6b69a68d628a7ef39e202eb40f955 Mon Sep 17 00:00:00 2001
From: qizhang <jony.zhang@nxp.com>
Date: Tue, 7 May 2024 17:41:30 +0800
Subject: [PATCH] igh 8mm: fix compile error due to kernel upgrade to v6.6.3

Signed-off-by: qizhang <jony.zhang@nxp.com>
Upstream-Status: Pending
---
 devices/fec/fec.h      |   9 +-
 devices/fec/fec_main.c | 221 +++++++++++++++++++++++++++--------------
 devices/fec/fec_ptp.c  | 154 ++++++++++++++--------------
 3 files changed, 230 insertions(+), 154 deletions(-)

diff --git a/devices/fec/fec.h b/devices/fec/fec.h
index 0483aea..1b7c340 100644
--- a/devices/fec/fec.h
+++ b/devices/fec/fec.h
@@ -484,7 +484,12 @@ struct bufdesc_ex {
  */
 #define FEC_QUIRK_DELAYED_CLKS_SUPPORT	(1 << 19)
 /* request pmqos during low power */
-#define FEC_QUIRK_HAS_PMQOS		(1 << 20)
+#define FEC_QUIRK_HAS_PMQOS		BIT(20)
+
+/* Not all FEC hardware block MDIOs support accesses in C45 mode.
+ * Older blocks in the ColdFire parts do not support it.
+ */
+#define FEC_QUIRK_HAS_MDIO_C45      BIT(21)
 
 struct bufdesc_prop {
 	int qid;
@@ -587,7 +592,7 @@ struct fec_enet_private {
 	struct ptp_clock *ptp_clock;
 	struct ptp_clock_info ptp_caps;
 	unsigned long last_overflow_check;
-	spinlock_t tmreg_lock;
+	raw_spinlock_t tmreg_lock;
 	struct cyclecounter cc;
 	struct timecounter tc;
 	int rx_hwtstamp_filter;
diff --git a/devices/fec/fec_main.c b/devices/fec/fec_main.c
index 56f1cb5..4d2550f 100644
--- a/devices/fec/fec_main.c
+++ b/devices/fec/fec_main.c
@@ -1013,9 +1013,9 @@ fec_enet_hwtstamp(struct fec_enet_private *fep, unsigned ts,
 	unsigned long flags;
 	u64 ns;
 
-	spin_lock_irqsave(&fep->tmreg_lock, flags);
+	raw_spin_lock_irqsave(&fep->tmreg_lock, flags);
 	ns = timecounter_cyc2time(&fep->tc, ts);
-	spin_unlock_irqrestore(&fep->tmreg_lock, flags);
+	raw_spin_unlock_irqrestore(&fep->tmreg_lock, flags);
 
 	memset(hwtstamps, 0, sizeof(*hwtstamps));
 	hwtstamps->hwtstamp = ns_to_ktime(ns);
@@ -1507,98 +1507,165 @@ static int fec_enet_mdio_wait(struct fec_enet_private *fep)
 	return ret;
 }
 
-static int fec_enet_mdio_read(struct mii_bus *bus, int mii_id, int regnum)
+static int fec_enet_mdio_read_c22(struct mii_bus *bus, int mii_id, int regnum)
 {
-	struct fec_enet_private *fep = bus->priv;
-	int ret = 0, frame_start, frame_addr, frame_op;
-	bool is_c45 = !!(regnum & MII_ADDR_C45);
+    struct fec_enet_private *fep = bus->priv;
+    struct device *dev = &fep->pdev->dev;
+    int ret = 0, frame_start, frame_addr, frame_op;
 
-	if (is_c45) {
-		frame_start = FEC_MMFR_ST_C45;
+    ret = pm_runtime_resume_and_get(dev);
+    if (ret < 0)
+        return ret;
 
-		/* write address */
-		frame_addr = (regnum >> 16);
-		writel(frame_start | FEC_MMFR_OP_ADDR_WRITE |
-		       FEC_MMFR_PA(mii_id) | FEC_MMFR_RA(frame_addr) |
-		       FEC_MMFR_TA | (regnum & 0xFFFF),
-		       fep->hwp + FEC_MII_DATA);
+    /* C22 read */
+    frame_op = FEC_MMFR_OP_READ;
+    frame_start = FEC_MMFR_ST;
+    frame_addr = regnum;
 
-		/* wait for end of transfer */
-		ret = fec_enet_mdio_wait(fep);
-		if (ret) {
-			netdev_err(fep->netdev, "MDIO address write timeout\n");
-			goto out;
-		}
+    /* start a read op */
+    writel(frame_start | frame_op |
+           FEC_MMFR_PA(mii_id) | FEC_MMFR_RA(frame_addr) |
+           FEC_MMFR_TA, fep->hwp + FEC_MII_DATA);
 
-		frame_op = FEC_MMFR_OP_READ_C45;
+    /* wait for end of transfer */
+    ret = fec_enet_mdio_wait(fep);
+    if (ret) {
+        netdev_err(fep->netdev, "MDIO read timeout\n");
+        goto out;
+    }
 
-	} else {
-		/* C22 read */
-		frame_op = FEC_MMFR_OP_READ;
-		frame_start = FEC_MMFR_ST;
-		frame_addr = regnum;
-	}
+    ret = FEC_MMFR_DATA(readl(fep->hwp + FEC_MII_DATA));
 
-	/* start a read op */
-	writel(frame_start | frame_op |
-		FEC_MMFR_PA(mii_id) | FEC_MMFR_RA(frame_addr) |
-		FEC_MMFR_TA, fep->hwp + FEC_MII_DATA);
+out:
+    pm_runtime_mark_last_busy(dev);
+    pm_runtime_put_autosuspend(dev);
 
-	/* wait for end of transfer */
-	ret = fec_enet_mdio_wait(fep);
-	if (ret) {
-		netdev_err(fep->netdev, "MDIO read timeout\n");
-		goto out;
-	}
+    return ret;
+}
 
-	ret = FEC_MMFR_DATA(readl(fep->hwp + FEC_MII_DATA));
+static int fec_enet_mdio_read_c45(struct mii_bus *bus, int mii_id,
+                  int devad, int regnum)
+{
+    struct fec_enet_private *fep = bus->priv;
+    struct device *dev = &fep->pdev->dev;
+    int ret = 0, frame_start, frame_op;
+
+    ret = pm_runtime_resume_and_get(dev);
+    if (ret < 0)
+        return ret;
+
+    frame_start = FEC_MMFR_ST_C45;
+
+    /* write address */
+    writel(frame_start | FEC_MMFR_OP_ADDR_WRITE |
+           FEC_MMFR_PA(mii_id) | FEC_MMFR_RA(devad) |
+           FEC_MMFR_TA | (regnum & 0xFFFF),
+           fep->hwp + FEC_MII_DATA);
+
+    /* wait for end of transfer */
+    ret = fec_enet_mdio_wait(fep);
+    if (ret) {
+        netdev_err(fep->netdev, "MDIO address write timeout\n");
+        goto out;
+    }
+
+    frame_op = FEC_MMFR_OP_READ_C45;
+
+    /* start a read op */
+    writel(frame_start | frame_op |
+           FEC_MMFR_PA(mii_id) | FEC_MMFR_RA(devad) |
+           FEC_MMFR_TA, fep->hwp + FEC_MII_DATA);
+
+    /* wait for end of transfer */
+    ret = fec_enet_mdio_wait(fep);
+    if (ret) {
+        netdev_err(fep->netdev, "MDIO read timeout\n");
+        goto out;
+    }
+
+    ret = FEC_MMFR_DATA(readl(fep->hwp + FEC_MII_DATA));
 
 out:
-	return ret;
+    pm_runtime_mark_last_busy(dev);
+    pm_runtime_put_autosuspend(dev);
+
+    return ret;
 }
 
-static int fec_enet_mdio_write(struct mii_bus *bus, int mii_id, int regnum,
-			   u16 value)
+static int fec_enet_mdio_write_c22(struct mii_bus *bus, int mii_id, int regnum,
+                   u16 value)
 {
-	struct fec_enet_private *fep = bus->priv;
-	int ret, frame_start, frame_addr;
-	bool is_c45 = !!(regnum & MII_ADDR_C45);
+    struct fec_enet_private *fep = bus->priv;
+    struct device *dev = &fep->pdev->dev;
+    int ret, frame_start, frame_addr;
 
-	if (is_c45) {
-		frame_start = FEC_MMFR_ST_C45;
+    ret = pm_runtime_resume_and_get(dev);
+    if (ret < 0)
+        return ret;
 
-		/* write address */
-		frame_addr = (regnum >> 16);
-		writel(frame_start | FEC_MMFR_OP_ADDR_WRITE |
-		       FEC_MMFR_PA(mii_id) | FEC_MMFR_RA(frame_addr) |
-		       FEC_MMFR_TA | (regnum & 0xFFFF),
-		       fep->hwp + FEC_MII_DATA);
+    /* C22 write */
+    frame_start = FEC_MMFR_ST;
+    frame_addr = regnum;
 
-		/* wait for end of transfer */
-		ret = fec_enet_mdio_wait(fep);
-		if (ret) {
-			netdev_err(fep->netdev, "MDIO address write timeout\n");
-			goto out;
-		}
-	} else {
-		/* C22 write */
-		frame_start = FEC_MMFR_ST;
-		frame_addr = regnum;
-	}
+    /* start a write op */
+    writel(frame_start | FEC_MMFR_OP_WRITE |
+           FEC_MMFR_PA(mii_id) | FEC_MMFR_RA(frame_addr) |
+           FEC_MMFR_TA | FEC_MMFR_DATA(value),
+           fep->hwp + FEC_MII_DATA);
 
-	/* start a write op */
-	writel(frame_start | FEC_MMFR_OP_WRITE |
-		FEC_MMFR_PA(mii_id) | FEC_MMFR_RA(frame_addr) |
-		FEC_MMFR_TA | FEC_MMFR_DATA(value),
-		fep->hwp + FEC_MII_DATA);
+    /* wait for end of transfer */
+    ret = fec_enet_mdio_wait(fep);
+    if (ret)
+        netdev_err(fep->netdev, "MDIO write timeout\n");
 
-	/* wait for end of transfer */
-	ret = fec_enet_mdio_wait(fep);
-	if (ret)
-		netdev_err(fep->netdev, "MDIO write timeout\n");
+    pm_runtime_mark_last_busy(dev);
+    pm_runtime_put_autosuspend(dev);
+
+    return ret;
+}
+
+static int fec_enet_mdio_write_c45(struct mii_bus *bus, int mii_id,
+                   int devad, int regnum, u16 value)
+{
+    struct fec_enet_private *fep = bus->priv;
+    struct device *dev = &fep->pdev->dev;
+    int ret, frame_start;
+
+    ret = pm_runtime_resume_and_get(dev);
+    if (ret < 0)
+        return ret;
+
+    frame_start = FEC_MMFR_ST_C45;
+
+    /* write address */
+    writel(frame_start | FEC_MMFR_OP_ADDR_WRITE |
+           FEC_MMFR_PA(mii_id) | FEC_MMFR_RA(devad) |
+           FEC_MMFR_TA | (regnum & 0xFFFF),
+           fep->hwp + FEC_MII_DATA);
+
+    /* wait for end of transfer */
+    ret = fec_enet_mdio_wait(fep);
+    if (ret) {
+        netdev_err(fep->netdev, "MDIO address write timeout\n");
+        goto out;
+    }
+
+    /* start a write op */
+    writel(frame_start | FEC_MMFR_OP_WRITE |
+           FEC_MMFR_PA(mii_id) | FEC_MMFR_RA(devad) |
+           FEC_MMFR_TA | FEC_MMFR_DATA(value),
+           fep->hwp + FEC_MII_DATA);
+
+    /* wait for end of transfer */
+    ret = fec_enet_mdio_wait(fep);
+    if (ret)
+        netdev_err(fep->netdev, "MDIO write timeout\n");
 
 out:
-	return ret;
+    pm_runtime_mark_last_busy(dev);
+    pm_runtime_put_autosuspend(dev);
+
+    return ret;
 }
 
 static void fec_enet_phy_reset_after_clk_enable(struct net_device *ndev)
@@ -1885,8 +1952,12 @@ static int fec_enet_mii_init(struct platform_device *pdev)
 	}
 
 	fep->mii_bus->name = "fec_enet_mii_bus";
-	fep->mii_bus->read = fec_enet_mdio_read;
-	fep->mii_bus->write = fec_enet_mdio_write;
+	fep->mii_bus->read = fec_enet_mdio_read_c22;
+    fep->mii_bus->write = fec_enet_mdio_write_c22;
+    if (fep->quirks & FEC_QUIRK_HAS_MDIO_C45) {
+        fep->mii_bus->read_c45 = fec_enet_mdio_read_c45;
+        fep->mii_bus->write_c45 = fec_enet_mdio_write_c45;
+    }
 	snprintf(fep->mii_bus->id, MII_BUS_ID_SIZE, "%s-%x",
 		pdev->name, fep->dev_id + 1);
 	fep->mii_bus->priv = fep;
diff --git a/devices/fec/fec_ptp.c b/devices/fec/fec_ptp.c
index be8a2f5..34be459 100644
--- a/devices/fec/fec_ptp.c
+++ b/devices/fec/fec_ptp.c
@@ -109,7 +109,7 @@ static int fec_ptp_enable_pps(struct fec_enet_private *fep, uint enable)
 	fep->pps_channel = DEFAULT_PPS_CHANNEL;
 	fep->reload_period = PPS_OUPUT_RELOAD_PERIOD;
 
-	spin_lock_irqsave(&fep->tmreg_lock, flags);
+	raw_spin_lock_irqsave(&fep->tmreg_lock, flags);
 
 	if (enable) {
 		/* clear capture or output compare interrupt status if have.
@@ -198,7 +198,7 @@ static int fec_ptp_enable_pps(struct fec_enet_private *fep, uint enable)
 	}
 
 	fep->pps_enable = enable;
-	spin_unlock_irqrestore(&fep->tmreg_lock, flags);
+	raw_spin_unlock_irqrestore(&fep->tmreg_lock, flags);
 
 	return 0;
 }
@@ -246,7 +246,7 @@ void fec_ptp_start_cyclecounter(struct net_device *ndev)
 	inc = 1000000000 / fep->cycle_speed;
 
 	/* grab the ptp lock */
-	spin_lock_irqsave(&fep->tmreg_lock, flags);
+	raw_spin_lock_irqsave(&fep->tmreg_lock, flags);
 
 	/* 1ns counter */
 	writel(inc << FEC_T_INC_OFFSET, fep->hwp + FEC_ATIME_INC);
@@ -266,80 +266,80 @@ void fec_ptp_start_cyclecounter(struct net_device *ndev)
 	/* reset the ns time counter */
 	timecounter_init(&fep->tc, &fep->cc, 0);
 
-	spin_unlock_irqrestore(&fep->tmreg_lock, flags);
+	raw_spin_unlock_irqrestore(&fep->tmreg_lock, flags);
 }
 
 /**
  * fec_ptp_adjfreq - adjust ptp cycle frequency
  * @ptp: the ptp clock structure
- * @ppb: parts per billion adjustment from base
+ * @scaled_ppm: scaled parts per million adjustment from base
  *
  * Adjust the frequency of the ptp cycle counter by the
- * indicated ppb from the base frequency.
+ * indicated amount from the base frequency.
+ *
+ * Scaled parts per million is ppm with a 16-bit binary fractional field.
+ *
+ * This version adjusts the HW counter. The HW implementation results in the following equation:
+ * fe * diff = ppb * (pc + 1)
+ * with:
+ *   . fe : ENET ref clock frequency in Hz
+ *   . diff = inc_corr - inc : difference between default increment and correction increment
+ *   . ppb : parts per billion adjustment from base
+ *   . pc : correction period (in number of fe clock cycles)
+ *
+ * Limitations:
+ *  . only add or remove 1ns per correction period. This will limit jitter and improve short term
+ *  accuracy (in particular for trigger events during clock recovery) but increase the max possible
+ *  error, since the correction period will be the shortest possible and thus may not be optimal.
+ *  In the case of an adjustment of about 100ppm (which should be the max if the ref clock
+ *  is within the 802.1AS spec), the max error will be about 0.2ppm with a 50MHz ref clock, and
+ *  0.08ppm with a 125MHz ref clock.
+ *  Long term accuracy will also be lower (20ns per 100ms @50MHz, 8ns per 100ms @125MHz), but this
+ *  can be fixed by phase adjustments.
+ *  . It seems not all period/correction values are valid. With a 1ns correction, all even
+ *  period values return wrong timings (half the requested correction), but on the other hand odd
+ *  values are not taken into account systematically by the hardware, so we choose the closest even
+ *  value that matches the following equation:
+ *  fe * diff = 2 * ppb * (pc + 1)
+ *  . given we force abs(diff) = 1, limit max adjustment to prevent pc < 1.
  *
- * Because ENET hardware frequency adjust is complex,
- * using software method to do that.
  */
-static int fec_ptp_adjfreq(struct ptp_clock_info *ptp, s32 ppb)
+static int fec_ptp_adjfine(struct ptp_clock_info *ptp, long scaled_ppm)
 {
-	unsigned long flags;
-	int neg_adj = 0;
-	u32 i, tmp;
-	u32 corr_inc, corr_period;
-	u32 corr_ns;
-	u64 lhs, rhs;
-
-	struct fec_enet_private *fep =
-	    container_of(ptp, struct fec_enet_private, ptp_caps);
-
-	if (ppb == 0)
-		return 0;
-
-	if (ppb < 0) {
-		ppb = -ppb;
-		neg_adj = 1;
-	}
-
-	/* In theory, corr_inc/corr_period = ppb/NSEC_PER_SEC;
-	 * Try to find the corr_inc  between 1 to fep->ptp_inc to
-	 * meet adjustment requirement.
-	 */
-	lhs = NSEC_PER_SEC;
-	rhs = (u64)ppb * (u64)fep->ptp_inc;
-	for (i = 1; i <= fep->ptp_inc; i++) {
-		if (lhs >= rhs) {
-			corr_inc = i;
-			corr_period = div_u64(lhs, rhs);
-			break;
-		}
-		lhs += NSEC_PER_SEC;
-	}
-	/* Not found? Set it to high value - double speed
-	 * correct in every clock step.
-	 */
-	if (i > fep->ptp_inc) {
-		corr_inc = fep->ptp_inc;
-		corr_period = 1;
-	}
-
-	if (neg_adj)
-		corr_ns = fep->ptp_inc - corr_inc;
-	else
-		corr_ns = fep->ptp_inc + corr_inc;
-
-	spin_lock_irqsave(&fep->tmreg_lock, flags);
-
-	tmp = readl(fep->hwp + FEC_ATIME_INC) & FEC_T_INC_MASK;
-	tmp |= corr_ns << FEC_T_INC_CORR_OFFSET;
-	writel(tmp, fep->hwp + FEC_ATIME_INC);
-	corr_period = corr_period > 1 ? corr_period - 1 : corr_period;
-	writel(corr_period, fep->hwp + FEC_ATIME_CORR);
-	/* dummy read to update the timer. */
-	timecounter_read(&fep->tc);
-
-	spin_unlock_irqrestore(&fep->tmreg_lock, flags);
-
-	return 0;
+    struct fec_enet_private *fep =
+            container_of(ptp, struct fec_enet_private, ptp_caps);
+    s32 ppb = scaled_ppm_to_ppb(scaled_ppm);
+    unsigned long flags;
+    u32 inc, cor, pc;
+
+    inc = fep->ptp_inc;
+    if (ppb == 0) {
+        cor = 0;
+        pc = 0;
+    } else {
+        if (ppb < 0) {
+            ppb = -ppb;
+            cor = inc - 1;
+        }
+        else
+            cor = inc + 1;
+
+        if (ppb > fep->ptp_caps.max_adj) {
+            dev_err(&fep->pdev->dev, "ppb value %d outside accepted range (max_adj = %d)", (cor > inc) ? ppb : -ppb, ptp->max_adj);
+            return -1;
+        }
+
+        pc = (((fep->cycle_speed / (2*ppb)) - 1) + 1) & ~ 0x1; // + 1) & ~ 0x1 returns the closest even value
+    }
+
+    raw_spin_lock_irqsave(&fep->tmreg_lock, flags);
+
+    writel_relaxed((cor << FEC_T_INC_CORR_OFFSET) | (inc << FEC_T_INC_OFFSET), fep->hwp + FEC_ATIME_INC);
+    writel_relaxed(pc, fep->hwp + FEC_ATIME_CORR);
+
+    raw_spin_unlock_irqrestore(&fep->tmreg_lock, flags);
+
+    return 0;
 }
 
 /**
@@ -355,9 +355,9 @@ static int fec_ptp_adjtime(struct ptp_clock_info *ptp, s64 delta)
 	    container_of(ptp, struct fec_enet_private, ptp_caps);
 	unsigned long flags;
 
-	spin_lock_irqsave(&fep->tmreg_lock, flags);
+	raw_spin_lock_irqsave(&fep->tmreg_lock, flags);
 	timecounter_adjtime(&fep->tc, delta);
-	spin_unlock_irqrestore(&fep->tmreg_lock, flags);
+	raw_spin_unlock_irqrestore(&fep->tmreg_lock, flags);
 
 	return 0;
 }
@@ -377,9 +377,9 @@ static int fec_ptp_gettime(struct ptp_clock_info *ptp, struct timespec64 *ts)
 	u64 ns;
 	unsigned long flags;
 
-	spin_lock_irqsave(&adapter->tmreg_lock, flags);
+	raw_spin_lock_irqsave(&adapter->tmreg_lock, flags);
 	ns = timecounter_read(&adapter->tc);
-	spin_unlock_irqrestore(&adapter->tmreg_lock, flags);
+	raw_spin_unlock_irqrestore(&adapter->tmreg_lock, flags);
 
 	*ts = ns_to_timespec64(ns);
 
@@ -417,10 +417,10 @@ static int fec_ptp_settime(struct ptp_clock_info *ptp,
 	 */
 	counter = ns & fep->cc.mask;
 
-	spin_lock_irqsave(&fep->tmreg_lock, flags);
+	raw_spin_lock_irqsave(&fep->tmreg_lock, flags);
 	writel(counter, fep->hwp + FEC_ATIME);
 	timecounter_init(&fep->tc, &fep->cc, ns);
-	spin_unlock_irqrestore(&fep->tmreg_lock, flags);
+	raw_spin_unlock_irqrestore(&fep->tmreg_lock, flags);
 	mutex_unlock(&fep->ptp_clk_mutex);
 	return 0;
 }
@@ -524,9 +524,9 @@ static void fec_time_keep(struct work_struct *work)
 
 	mutex_lock(&fep->ptp_clk_mutex);
 	if (fep->ptp_clk_on) {
-		spin_lock_irqsave(&fep->tmreg_lock, flags);
+		raw_spin_lock_irqsave(&fep->tmreg_lock, flags);
 		timecounter_read(&fep->tc);
-		spin_unlock_irqrestore(&fep->tmreg_lock, flags);
+		raw_spin_unlock_irqrestore(&fep->tmreg_lock, flags);
 	}
 	mutex_unlock(&fep->ptp_clk_mutex);
 
@@ -590,7 +590,7 @@ void fec_ptp_init(struct platform_device *pdev, int irq_idx)
 	fep->ptp_caps.n_per_out = 0;
 	fep->ptp_caps.n_pins = 0;
 	fep->ptp_caps.pps = 1;
-	fep->ptp_caps.adjfreq = fec_ptp_adjfreq;
+	fep->ptp_caps.adjfine = fec_ptp_adjfine;
 	fep->ptp_caps.adjtime = fec_ptp_adjtime;
 	fep->ptp_caps.gettime64 = fec_ptp_gettime;
 	fep->ptp_caps.settime64 = fec_ptp_settime;
@@ -603,7 +603,7 @@ void fec_ptp_init(struct platform_device *pdev, int irq_idx)
 	}
 	fep->ptp_inc = NSEC_PER_SEC / fep->cycle_speed;
 
-	spin_lock_init(&fep->tmreg_lock);
+	raw_spin_lock_init(&fep->tmreg_lock);
 
 	fec_ptp_start_cyclecounter(ndev);
 
-- 
2.25.1

