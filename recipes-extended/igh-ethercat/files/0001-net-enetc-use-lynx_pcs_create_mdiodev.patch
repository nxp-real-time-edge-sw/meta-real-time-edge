From 0dc639b854ceba354ca8418e1f837f6f8c9bc6cd Mon Sep 17 00:00:00 2001
From: qizhang <jony.zhang@nxp.com>
Date: Wed, 3 Jan 2024 23:52:55 +0800
Subject: [PATCH] net: enetc: use lynx_pcs_create_mdiodev()

Use the newly introduced lynx_pcs_create_mdiodev() which simplifies the
creation and destruction of the lynx PCS.

Signed-off-by: qizhang <jony.zhang@nxp.com>
Upstream-Status: Pending
---
 devices/enetc/enetc_pf.c | 19 +++----------------
 1 file changed, 3 insertions(+), 16 deletions(-)

diff --git a/devices/enetc/enetc_pf.c b/devices/enetc/enetc_pf.c
index 7b935464..8c665367 100644
--- a/devices/enetc/enetc_pf.c
+++ b/devices/enetc/enetc_pf.c
@@ -308,7 +308,6 @@ static int enetc_imdio_create(struct enetc_pf *pf)
 	struct device *dev = &pf->si->pdev->dev;
 	struct enetc_mdio_priv *mdio_priv;
 	struct phylink_pcs *phylink_pcs;
-	struct mdio_device *pcs;
 	struct mii_bus *bus;
 	int err;
 
@@ -332,17 +331,9 @@ static int enetc_imdio_create(struct enetc_pf *pf)
 		goto free_mdio_bus;
 	}
 
-	pcs = mdio_device_create(bus, 0);
-	if (IS_ERR(pcs)) {
-		err = PTR_ERR(pcs);
-		dev_err(dev, "cannot create pcs (%d)\n", err);
-		goto unregister_mdiobus;
-	}
-
-	phylink_pcs = lynx_pcs_create(pcs);
-	if (!phylink_pcs) {
-		mdio_device_free(pcs);
-		err = -ENOMEM;
+	phylink_pcs = lynx_pcs_create_mdiodev(bus, 0);
+	if (IS_ERR(phylink_pcs)) {
+		err = PTR_ERR(phylink_pcs);
 		dev_err(dev, "cannot create lynx pcs (%d)\n", err);
 		goto unregister_mdiobus;
 	}
@@ -361,11 +352,7 @@ free_mdio_bus:
 
 static void enetc_imdio_remove(struct enetc_pf *pf)
 {
-	struct mdio_device *mdio_device;
-
 	if (pf->pcs) {
-		mdio_device = lynx_get_mdio_device(pf->pcs);
-		mdio_device_free(mdio_device);
 		lynx_pcs_destroy(pf->pcs);
 	}
 	if (pf->imdio) {
-- 
2.25.1

