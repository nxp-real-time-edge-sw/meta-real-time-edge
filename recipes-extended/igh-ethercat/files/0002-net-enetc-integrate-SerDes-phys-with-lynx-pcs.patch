From 49f5eae35b1c393c98305e4c4cae4c06a932625d Mon Sep 17 00:00:00 2001
From: qizhang <jony.zhang@nxp.com>
Date: Thu, 4 Jan 2024 00:14:44 +0800
Subject: [PATCH] net: enetc: integrate SerDes phys with lynx pcs

Get an optional "phys" phandle and pass it to the Lynx PCS module, which
can use it for dynamic protocol reconfiguration and/or C73.

Signed-off-by: qizhang <jony.zhang@nxp.com>
Upstream-Status: Pending
---
 devices/enetc/enetc_pf.c | 11 ++++++++++-
 1 file changed, 10 insertions(+), 1 deletion(-)

diff --git a/devices/enetc/enetc_pf.c b/devices/enetc/enetc_pf.c
index 8c665367..d3469c4a 100644
--- a/devices/enetc/enetc_pf.c
+++ b/devices/enetc/enetc_pf.c
@@ -7,6 +7,7 @@
 #include <linux/of_mdio.h>
 #include <linux/of_net.h>
 #include <linux/pcs-lynx.h>
+#include <linux/phy/phy.h>
 #include "enetc_pf.h"
 #include "../ecdev.h"
 
@@ -309,8 +310,16 @@ static int enetc_imdio_create(struct enetc_pf *pf)
 	struct enetc_mdio_priv *mdio_priv;
 	struct phylink_pcs *phylink_pcs;
 	struct mii_bus *bus;
+	struct phy *serdes;
+	size_t num_phys;
 	int err;
 
+	serdes = devm_of_phy_optional_get(dev, dev->of_node, NULL);
+	if (IS_ERR(serdes))
+		return PTR_ERR(serdes);
+
+	num_phys = serdes ? 1 : 0;
+
 	bus = mdiobus_alloc_size(sizeof(*mdio_priv));
 	if (!bus)
 		return -ENOMEM;
@@ -331,7 +340,7 @@ static int enetc_imdio_create(struct enetc_pf *pf)
 		goto free_mdio_bus;
 	}
 
-	phylink_pcs = lynx_pcs_create_mdiodev(bus, 0);
+	phylink_pcs = lynx_pcs_create_mdiodev(bus, 0, &serdes, num_phys);
 	if (IS_ERR(phylink_pcs)) {
 		err = PTR_ERR(phylink_pcs);
 		dev_err(dev, "cannot create lynx pcs (%d)\n", err);
-- 
2.25.1

