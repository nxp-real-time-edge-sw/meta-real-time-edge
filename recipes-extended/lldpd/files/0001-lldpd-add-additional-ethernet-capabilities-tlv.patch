From a125d8f0459acc1f335c4c88aa3c263067f23b57 Mon Sep 17 00:00:00 2001
From: Xiaoliang Yang <xiaoliang.yang_1@nxp.com>
Date: Sat, 19 Apr 2025 09:58:28 +0800
Subject: [PATCH 1/2] lldpd: add additional ethernet capabilities tlv

Additional Ethernet capabilities TLV is defined in IEEE Std 802.3-2018.
Its subtype is 7, and the first 4 bits indicate preemption capability
and status. The preemption status is got from ethtool ioctl in Linux.

Signed-off-by: Xiaoliang Yang <xiaoliang.yang_1@nxp.com>
Upstream-Status: Pending
---
 include/linux/ethtool.h       | 14 ++++++++++++++
 src/daemon/interfaces-linux.c | 31 +++++++++++++++++++++++++++++++
 src/daemon/lldp-tlv.h         |  1 +
 src/daemon/protocols/lldp.c   | 11 +++++++++++
 src/lldpd-structs.h           |  9 +++++++++
 5 files changed, 66 insertions(+)

diff --git a/include/linux/ethtool.h b/include/linux/ethtool.h
index 6bfbb85..6fdf5e8 100644
--- a/include/linux/ethtool.h
+++ b/include/linux/ethtool.h
@@ -341,6 +341,18 @@ struct ethtool_eee {
 	__u32	reserved[2];
 };
 
+struct ethtool_fp {
+         __u32 cmd;
+        __u32 verify_time;
+        __u32 min_frag_size;
+        __u8 tx_enabled;
+        __u8 pmac_enabled;
+        __u8 verify_enabled;
+        __u8 active;
+        __u8 support;
+        __u8 reserved[3];
+};
+
 /**
  * struct ethtool_modinfo - plugin module eeprom information
  * @cmd: %ETHTOOL_GMODULEINFO
@@ -1395,6 +1407,8 @@ enum ethtool_fec_config_bits {
 #define ETHTOOL_PHY_STUNABLE	0x0000004f /* Set PHY tunable configuration */
 #define ETHTOOL_GFECPARAM	0x00000050 /* Get FEC settings */
 #define ETHTOOL_SFECPARAM	0x00000051 /* Set FEC settings */
+#define ETHTOOL_GMM             0x00000052 /* Get Frame Preemption settings */
+#define ETHTOOL_SMM             0x00000053 /* Set Frame Preemption settings */
 
 /* compatibility with older code */
 #define SPARC_ETH_GSET		ETHTOOL_GSET
diff --git a/src/daemon/interfaces-linux.c b/src/daemon/interfaces-linux.c
index d4f8634..963c8c0 100644
--- a/src/daemon/interfaces-linux.c
+++ b/src/daemon/interfaces-linux.c
@@ -42,6 +42,8 @@
 #define MAX_PORTS 1024
 #define MAX_BRIDGES 1024
 
+#define DIV_ROUND_UP(n, d) (((n)+(d)-1) / (d))
+
 static int
 iflinux_eth_init(struct lldpd *cfg, struct lldpd_hardware *hardware)
 {
@@ -519,6 +521,32 @@ end:
 	return rc;
 }
 
+static int
+iflinux_ethtool_gfp(struct lldpd *cfg, const char *ifname, struct lldpd_dot3_fp *p_fp) {
+	int rc;
+	struct ethtool_fp gfp;
+	struct ifreq ifr = {};
+
+	strlcpy(ifr.ifr_name, ifname, sizeof(ifr.ifr_name));
+
+	memset(&gfp, 0, sizeof(gfp));
+	gfp.cmd = ETHTOOL_GMM;
+	ifr.ifr_data = (caddr_t)&gfp;
+	rc = ioctl(cfg->g_sock, SIOCETHTOOL, &ifr);
+	if (rc) {
+		log_warnx("interfaces", "get preemption error");
+
+		return rc;
+	}
+
+	p_fp->support = gfp.support;
+	p_fp->status = gfp.pmac_enabled;
+	p_fp->active = gfp.active;
+	p_fp->frag_size = DIV_ROUND_UP(gfp.min_frag_size, 64) - 1;
+
+	return 0;
+}
+
 /* Fill up MAC/PHY for a given hardware port */
 static void
 iflinux_macphy(struct lldpd *cfg, struct lldpd_hardware *hardware)
@@ -547,6 +575,9 @@ iflinux_macphy(struct lldpd *cfg, struct lldpd_hardware *hardware)
 
 	log_debug("interfaces", "ask ethtool for the appropriate MAC/PHY for %s",
 	    hardware->h_ifname);
+
+	iflinux_ethtool_gfp(cfg, hardware->h_ifname, &port->p_fp);
+
 	if (iflinux_ethtool_glink(cfg, hardware->h_ifname, &uset) == 0) {
 		port->p_macphy.autoneg_support =
 		    iflinux_ethtool_link_mode_test_bit(ETHTOOL_LINK_MODE_Autoneg_BIT,
diff --git a/src/daemon/lldp-tlv.h b/src/daemon/lldp-tlv.h
index a9bf7cf..9de9703 100644
--- a/src/daemon/lldp-tlv.h
+++ b/src/daemon/lldp-tlv.h
@@ -67,6 +67,7 @@
 #define LLDP_TLV_DOT3_POWER 2
 #define LLDP_TLV_DOT3_LA 3
 #define LLDP_TLV_DOT3_MFS 4
+#define LLDP_TLV_DOT3_FP 7
 
 #define LLDP_TLV_MED_CAP 1
 #define LLDP_TLV_MED_POLICY 2
diff --git a/src/daemon/protocols/lldp.c b/src/daemon/protocols/lldp.c
index 6e73237..8565e61 100644
--- a/src/daemon/protocols/lldp.c
+++ b/src/daemon/protocols/lldp.c
@@ -77,6 +77,7 @@ _lldp_send(struct lldpd *global, struct lldpd_hardware *hardware, u_int8_t c_id_
 #endif
 #ifdef ENABLE_DOT3
 	const u_int8_t dot3[] = LLDP_TLV_ORG_DOT3;
+	u_int8_t fp_tlv;
 #endif
 #ifdef ENABLE_LLDPMED
 	int i;
@@ -259,6 +260,16 @@ _lldp_send(struct lldpd *global, struct lldpd_hardware *hardware, u_int8_t c_id_
 		POKE_UINT32(port->p_aggregid) && POKE_END_LLDP_TLV))
 		goto toobig;
 
+	fp_tlv = port->p_fp.support | port->p_fp.status << 1 |
+		 port->p_fp.active << 2 | port->p_fp.frag_size << 3;
+	if (!(
+	      POKE_START_LLDP_TLV(LLDP_TLV_ORG) &&
+	      POKE_BYTES(dot3, sizeof(dot3)) &&
+	      POKE_UINT8(LLDP_TLV_DOT3_FP) &&
+	      POKE_UINT16(fp_tlv) &&
+	      POKE_END_LLDP_TLV))
+		goto toobig;
+
 	/* MAC/PHY */
 	if (!(POKE_START_LLDP_TLV(LLDP_TLV_ORG) && POKE_BYTES(dot3, sizeof(dot3)) &&
 		POKE_UINT8(LLDP_TLV_DOT3_MAC) &&
diff --git a/src/lldpd-structs.h b/src/lldpd-structs.h
index 8d19282..a3bcb7a 100644
--- a/src/lldpd-structs.h
+++ b/src/lldpd-structs.h
@@ -143,6 +143,14 @@ struct lldpd_dot3_power {
 	u_int16_t pse_max;
 };
 MARSHAL(lldpd_dot3_power);
+
+struct lldpd_dot3_fp {
+	u_int8_t support;
+	u_int8_t status;
+	u_int8_t active;
+	u_int8_t frag_size;
+};
+
 #endif
 
 #if defined ENABLE_CDP || defined ENABLE_FDP
@@ -277,6 +285,7 @@ struct lldpd_port {
 	u_int32_t p_aggregid;
 	struct lldpd_dot3_macphy p_macphy;
 	struct lldpd_dot3_power p_power;
+	struct lldpd_dot3_fp p_fp;
 #endif
 
 #ifdef ENABLE_LLDPMED
-- 
2.34.1

